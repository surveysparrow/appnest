import * as react from 'react';

declare const iconList: {
    name: string;
    icons: string[];
}[];

declare const Photo: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Component: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Grid: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Outline: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const PhotoDrag: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const GridAlt: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Search: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Zoom: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const ZoomOut: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const ZoomReset: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Eye: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const EyeClose: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Lightning: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const LightningOff: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Contrast: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const SwitchAlt: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Mirror: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Grow: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const PaintBrush: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Ruler: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Stop: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Camera: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Video: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Speaker: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Play: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const PlayBack: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const PlayNext: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Rewind: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const FastForward: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const StopAlt: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const SideBySide: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Stacked: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Sun: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Moon: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Book: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Document: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Copy: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Category: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Folder: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Print: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const GraphLine: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Calendar: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const GraphBar: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Menu: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const MenuReverse: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Filter: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const DocChart: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const DocList: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Drag: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Markup: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Bold: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Italic: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const PaperClip: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const ListOrdered: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const ListUnordered: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Paragraph: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Markdown: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Repo: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Commit: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Branch: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const PullRequest: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Merge: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Apple: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Linux: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Ubuntu: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Windows: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Chrome: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Storybook: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const AzureDevOps: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Bitbucket: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Chromatic: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const ComponentDriven: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Discord: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Facebook: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Figma: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const GDrive: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Github: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Gitlab: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Google: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Graphql: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Medium: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Redux: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Twitter: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Youtube: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const VSCode: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Linkedin: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Browser: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Tablet: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Mobile: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Watch: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Sidebar: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const SidebarAlt: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const SidebarAltToggle: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const SidebarToggle: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const BottomBar: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const BottomBarToggle: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const CPU: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Database: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Memory: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Structure: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Box: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Power: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Edit: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Cog: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Nut: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Wrench: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Ellipsis: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Wand: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Check: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Form: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const BatchDeny: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const BatchAccept: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Controls: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Plus: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const CloseAlt: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Cross: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Trash: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const PinAlt: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Unpin: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Add: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Subtract: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Close: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Delete: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Passed: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Changed: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Failed: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Clear: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Comment: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const CommentAdd: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const RequestChange: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Comments: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Chat: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Lock: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Unlock: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Key: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Outbox: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Credit: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Button: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Type: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const PointerDefault: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const PointerHand: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Command: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Info: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Question: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Support: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Alert: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const AlertAlt: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Email: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Phone: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Link: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const LinkBroken: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Bell: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const RSS: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const ShareAlt: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Share: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const JumpTo: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const CircleHollow: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Circle: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const BookmarkHollow: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Bookmark: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Diamond: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const HeartHollow: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Heart: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const StarHollow: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Star: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Certificate: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Verified: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const ThumbsUp: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Shield: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Basket: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Beaker: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Hourglass: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Flag: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const CloudHollow: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Cloud: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Sticker: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const ChevronUp: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const ChevronDown: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const ChevronLeft: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const ChevronRight: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const ArrowUp: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const ArrowDown: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const ArrowLeft: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const ArrowRight: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const ArrowSolidUp: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const ArrowSolidDown: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const ArrowSolidLeft: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const ArrowSolidRight: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const ExpandAlt: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Collapse: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Expand: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Unfold: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Transfer: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Redirect: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Undo: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Reply: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Sync: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Upload: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Download: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Back: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Proceed: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Refresh: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Globe: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Compass: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Location: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Pin: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Time: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Dashboard: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Timer: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Home: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Admin: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Direction: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const User: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const UserAlt: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const UserAdd: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Users: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Profile: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const FaceHappy: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const FaceNeutral: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const FaceSad: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const Accessibility: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;
declare const AccessibilityAlt: (props: Omit<{
    color?: string | undefined;
    size?: number | undefined;
    svgProps?: react.SVGProps<SVGSVGElement> | undefined;
} & Omit<react.HTMLProps<HTMLSpanElement>, "color" | "size">, "ref"> & {
    ref?: ((instance: HTMLSpanElement | null) => void) | react.RefObject<HTMLSpanElement> | null | undefined;
}) => react.JSX.Element;

export { Accessibility, AccessibilityAlt, Add, Admin, Alert, AlertAlt, Apple, ArrowDown, ArrowLeft, ArrowRight, ArrowSolidDown, ArrowSolidLeft, ArrowSolidRight, ArrowSolidUp, ArrowUp, AzureDevOps, Back, Basket, BatchAccept, BatchDeny, Beaker, Bell, Bitbucket, Bold, Book, Bookmark, BookmarkHollow, BottomBar, BottomBarToggle, Box, Branch, Browser, Button, CPU, Calendar, Camera, Category, Certificate, Changed, Chat, Check, ChevronDown, ChevronLeft, ChevronRight, ChevronUp, Chromatic, Chrome, Circle, CircleHollow, Clear, Close, CloseAlt, Cloud, CloudHollow, Cog, Collapse, Command, Comment, CommentAdd, Comments, Commit, Compass, Component, ComponentDriven, Contrast, Controls, Copy, Credit, Cross, Dashboard, Database, Delete, Diamond, Direction, Discord, DocChart, DocList, Document, Download, Drag, Edit, Ellipsis, Email, Expand, ExpandAlt, Eye, EyeClose, FaceHappy, FaceNeutral, FaceSad, Facebook, Failed, FastForward, Figma, Filter, Flag, Folder, Form, GDrive, Github, Gitlab, Globe, Google, GraphBar, GraphLine, Graphql, Grid, GridAlt, Grow, Heart, HeartHollow, Home, Hourglass, Info, Italic, JumpTo, Key, Lightning, LightningOff, Link, LinkBroken, Linkedin, Linux, ListOrdered, ListUnordered, Location, Lock, Markdown, Markup, Medium, Memory, Menu, MenuReverse, Merge, Mirror, Mobile, Moon, Nut, Outbox, Outline, PaintBrush, PaperClip, Paragraph, Passed, Phone, Photo, PhotoDrag, Pin, PinAlt, Play, PlayBack, PlayNext, Plus, PointerDefault, PointerHand, Power, Print, Proceed, Profile, PullRequest, Question, RSS, Redirect, Redux, Refresh, Reply, Repo, RequestChange, Rewind, Ruler, Search, Share, ShareAlt, Shield, SideBySide, Sidebar, SidebarAlt, SidebarAltToggle, SidebarToggle, Speaker, Stacked, Star, StarHollow, Sticker, Stop, StopAlt, Storybook, Structure, Subtract, Sun, Support, SwitchAlt, Sync, Tablet, ThumbsUp, Time, Timer, Transfer, Trash, Twitter, Type, Ubuntu, Undo, Unfold, Unlock, Unpin, Upload, User, UserAdd, UserAlt, Users, VSCode, Verified, Video, Wand, Watch, Windows, Wrench, Youtube, Zoom, ZoomOut, ZoomReset, iconList };
