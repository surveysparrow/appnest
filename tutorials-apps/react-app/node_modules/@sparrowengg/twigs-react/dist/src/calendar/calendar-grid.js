import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { endOfMonth, getWeeksInMonth } from '@internationalized/date';
import { useId } from 'react';
import { useCalendarGrid, useLocale } from 'react-aria';
import { Box } from '../box';
import { CalendarCell } from './calendar-cell';
import { DaysContainer } from './calendar-day';
import { Week, WeekContainer } from './calendar-week';
export const CalendarGrid = ({ state, offset = {} }) => {
    const { locale } = useLocale();
    const id = useId();
    const startDate = state.visibleRange.start.add(offset);
    const endDate = endOfMonth(startDate);
    const { gridProps, headerProps, weekDays } = useCalendarGrid({
        startDate,
        endDate
    }, state);
    // Get the number of weeks in the month so we can render the proper number of rows.
    const weeksInMonth = getWeeksInMonth(state.visibleRange.start, locale);
    return (_jsxs(Box, { ...gridProps, children: [_jsx(WeekContainer, { ...headerProps, children: weekDays.map((day, index) => (
                // eslint-disable-next-line react/no-array-index-key
                _jsx(Week, { children: day }, `twigs-calendar-grid-${day}-${startDate}-${id}-${index}`))) }), _jsx(Box, { children: [...new Array(weeksInMonth).keys()].map((weekIndex, index) => (
                // eslint-disable-next-line react/no-array-index-key
                _jsx(DaysContainer, { children: state
                        .getDatesInWeek(weekIndex, startDate)
                        .map((date) => (date ? (_jsx(CalendarCell, { state: state, date: date, currentMonth: startDate }, `twigs-calendar-cell-${date}-${id}`)) : null)) }, `weekIndex-${startDate}-${id}-${index}`))) })] }));
};
