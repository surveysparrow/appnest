import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useRef } from 'react';
import { useDatePickerState } from 'react-stately';
import { useDatePicker } from 'react-aria';
import { CalendarIcon } from '@sparrowengg/twigs-react-icons';
import { Box } from '../box';
import { Popover, PopoverContent, PopoverTrigger } from '../popover';
import { Calendar } from '../calendar';
import { DateField } from './date-field';
import { FormLabel } from '../form-label';
import { IconButton } from '../button';
export const DatePicker = (props) => {
    const state = useDatePickerState({
        ...props,
        shouldCloseOnSelect: props.closeOnSelect
    });
    const ref = useRef(null);
    const { groupProps, labelProps, fieldProps, buttonProps, dialogProps, calendarProps } = useDatePicker(props, state, ref);
    return (_jsxs(Box, { css: {
            position: 'relative',
            display: 'inline-flex',
            flexDirection: 'column'
        }, children: [props.label
                && _jsx(FormLabel, { ...labelProps, css: { mb: '3px' }, children: props.label }), _jsxs(Popover, { open: state.isOpen, onOpenChange: state.toggle, children: [_jsx(PopoverTrigger, { asChild: true, children: _jsxs(Box, { ...groupProps, ref: ref, css: {
                                display: 'inline-flex',
                                width: 'auto',
                                background: '$black50',
                                border: 'none',
                                padding: '$4 $6',
                                borderRadius: '$lg'
                            }, children: [_jsx(Box, { css: {
                                        position: 'relative',
                                        transition: 'all 200ms',
                                        display: 'flex',
                                        alignItems: 'center'
                                    }, ref: ref, children: _jsx(DateField, { ...fieldProps }) }), _jsx(IconButton, { ...buttonProps, onClick: state.open, color: "bright", size: "md", css: {
                                        background: 'none',
                                        color: '$black900'
                                    }, icon: _jsx(CalendarIcon, {}) })] }) }), _jsx(PopoverContent, { ...dialogProps, css: {
                            width: 'auto',
                            maxWidth: 340
                        }, children: _jsx(Calendar, { ...calendarProps }) })] })] }));
};
