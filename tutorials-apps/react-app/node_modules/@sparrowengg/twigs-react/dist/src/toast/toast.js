import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from "react/jsx-runtime";
import React from 'react';
import * as ToastPrimitive from '@radix-ui/react-toast';
import { AlertFillIcon, TickCircleFillIcon, InfoIcon } from '@sparrowengg/twigs-react-icons';
import { styled, keyframes } from '../../stitches.config';
import { Flex } from '../flex';
const StyledTickIcon = styled(TickCircleFillIcon);
const StyledErrorIcon = styled(AlertFillIcon);
const StyledWarningIcon = styled(InfoIcon);
const hide = keyframes({
    '0%': { opacity: 1 },
    '100%': { opacity: 0 }
});
const slideInFromRight = keyframes({
    from: { transform: 'translateX(calc(100% + $space$12))' },
    to: { transform: 'translateX(0)' }
});
const slideInFromLeft = keyframes({
    from: { transform: 'translateX(calc(-100% + $space$12))' },
    to: { transform: 'translateX(0)' }
});
const slideInFromTop = keyframes({
    from: { transform: 'translateY(calc(-100% + $space$12))' },
    to: { transform: 'translateY(0)' }
});
const slideInFromBottom = keyframes({
    from: { transform: 'translateY(calc(100% + $space$12))' },
    to: { transform: 'translateY(0)' }
});
const swipeOutToRight = keyframes({
    from: { transform: 'translateX(var(--radix-toast-swipe-end-x))' },
    to: { transform: 'translateX(calc(100% + $space$12))' }
});
const swipeOutToLeft = keyframes({
    from: { transform: 'translateX(var(--radix-toast-swipe-end-x))' },
    to: { transform: 'translateX(calc(-100% + $space$12))' }
});
const swipeOutToTop = keyframes({
    from: { transform: 'translateX(var(--radix-toast-swipe-end-x))' },
    to: { transform: 'translateY(calc(-100% + $space$12))' }
});
const swipeOutToBottom = keyframes({
    from: { transform: 'translateX(var(--radix-toast-swipe-end-x))' },
    to: { transform: 'translateY(calc(100% + $space$12))' }
});
const StyledViewport = styled(ToastPrimitive.Viewport, {
    position: 'fixed',
    display: 'flex',
    flexDirection: 'column',
    paddingBottom: '$12',
    gap: '$space$5',
    width: 406,
    maxWidth: '100vw',
    margin: 0,
    listStyle: 'none',
    zIndex: 99999999,
    outline: 'none',
    variants: {
        position: {
            'top-left': {
                top: '0',
                left: '0',
                '& li': {
                    '@media (prefers-reduced-motion: no-preference)': {
                        '&[data-state="open"]': {
                            animation: `${slideInFromLeft} 150ms cubic-bezier(0.16, 1, 0.3, 1)`
                        },
                        '&[data-swipe="end"]': {
                            animation: `${swipeOutToLeft} 100ms ease-out`
                        }
                    }
                }
            },
            'top-center': {
                top: '0',
                left: '50%',
                transform: 'translateX(-50%)',
                '& li': {
                    '@media (prefers-reduced-motion: no-preference)': {
                        '&[data-state="open"]': {
                            animation: `${slideInFromTop} 150ms cubic-bezier(0.16, 1, 0.3, 1)`
                        },
                        '&[data-swipe="end"]': {
                            animation: `${swipeOutToTop} 100ms ease-out`
                        }
                    }
                }
            },
            'top-right': {
                top: '0',
                right: '0',
                '& li': {
                    '@media (prefers-reduced-motion: no-preference)': {
                        '&[data-state="open"]': {
                            animation: `${slideInFromRight} 150ms cubic-bezier(0.16, 1, 0.3, 1)`
                        },
                        '&[data-swipe="end"]': {
                            animation: `${swipeOutToRight} 100ms ease-out`
                        }
                    }
                }
            },
            'bottom-left': {
                bottom: '0',
                left: '0',
                '& li': {
                    '@media (prefers-reduced-motion: no-preference)': {
                        '&[data-state="open"]': {
                            animation: `${slideInFromLeft} 150ms cubic-bezier(0.16, 1, 0.3, 1)`
                        },
                        '&[data-swipe="end"]': {
                            animation: `${swipeOutToLeft} 100ms ease-out`
                        }
                    }
                }
            },
            'bottom-center': {
                bottom: '0',
                left: '50%',
                transform: 'translateX(-50%)',
                '& li': {
                    '@media (prefers-reduced-motion: no-preference)': {
                        '&[data-state="open"]': {
                            animation: `${slideInFromBottom} 150ms cubic-bezier(0.16, 1, 0.3, 1)`
                        },
                        '&[data-swipe="end"]': {
                            animation: `${swipeOutToBottom} 100ms ease-out`
                        }
                    }
                }
            },
            'bottom-right': {
                bottom: '0',
                right: '0',
                '& li': {
                    '@media (prefers-reduced-motion: no-preference)': {
                        '&[data-state="open"]': {
                            animation: `${slideInFromRight} 150ms cubic-bezier(0.16, 1, 0.3, 1)`
                        },
                        '&[data-swipe="end"]': {
                            animation: `${swipeOutToRight} 100ms ease-out`
                        }
                    }
                }
            }
        }
    },
    defaultVariants: {
        position: 'bottom-center'
    }
});
const StyledIcon = styled(Flex, {
    gridArea: 'icon',
    height: '100%',
    width: '$10',
    alignItems: 'center',
    justifyContent: 'center'
});
const Icon = ({ children, variant = 'success', ...props }) => {
    const iconMap = {
        default: () => _jsx(StyledTickIcon, {}),
        success: () => _jsx(StyledTickIcon, {}),
        error: () => _jsx(StyledErrorIcon, {}),
        warning: () => _jsx(StyledWarningIcon, {})
    };
    return (_jsx(StyledIcon, { ...props, children: children || _jsx(_Fragment, { children: iconMap[variant]() }) }));
};
const StyledTitle = styled(ToastPrimitive.Title, {
    gridArea: 'title',
    fontWeight: '$5',
    color: '$white900',
    fontSize: '$sm'
});
const StyledDescription = styled(ToastPrimitive.Description, {
    gridArea: 'description',
    margin: 0,
    color: '$white900',
    fontSize: '$sm'
});
const StyledToast = styled(ToastPrimitive.Root, {
    backgroundColor: '$neutral900',
    borderRadius: '$xl',
    border: '$borderWidths$xs solid $black300',
    display: 'grid',
    padding: '$8 $6',
    gridTemplateAreas: '"icon content action" "icon content action"',
    gridTemplateColumns: 'max-content auto max-content',
    columnGap: '$8',
    alignItems: 'center',
    overflow: 'hidden',
    '&:focus, &:active': {
        outline: 'none'
    },
    '&:focus-visible': {
        $$shadowColor: '$colors$primary300',
        boxShadow: 'rgb(255, 255, 255) 0px 0px 0px 2px, $$shadowColor 0px 0px 0px 4px, rgba(0, 0, 0, 0.05) 0px 1px 2px 0px'
    },
    variants: {
        variant: {
            default: {
                background: '$accent100',
                [`& ${StyledIcon} svg`]: {
                    color: '$accent500'
                },
                [`& ${StyledTitle}`]: {
                    color: '$black900'
                },
                [`& ${StyledDescription}`]: {
                    color: '$black800'
                }
            },
            success: {
                background: '$accent700',
                [`& ${StyledIcon} svg`]: {
                    color: '$primary400'
                },
                [`& ${StyledTitle}`]: {
                    color: '$white900'
                },
                [`& ${StyledDescription}`]: {
                    color: '$white800'
                }
            },
            error: {
                background: '$error600',
                [`& ${StyledIcon} svg`]: {
                    color: '$white900'
                },
                [`& ${StyledTitle}`]: {
                    color: '$white900'
                },
                [`& ${StyledDescription}`]: {
                    color: '$white800'
                }
            },
            warning: {
                background: '$warning200',
                [`& ${StyledIcon} svg`]: {
                    color: '$black700'
                },
                [`& ${StyledTitle}`]: {
                    color: '$black900'
                },
                [`& ${StyledDescription}`]: {
                    color: '$black800'
                }
            }
        }
    },
    '@media (prefers-reduced-motion: no-preference)': {
        '&[data-state="closed"]': {
            animation: `${hide} 100ms ease-in`
        },
        '&[data-swipe="move"]': {
            transform: 'translateX(var(--radix-toast-swipe-move-x))'
        },
        '&[data-swipe="cancel"]': {
            transform: 'translateX(0)',
            transition: 'transform 200ms ease-out'
        }
    },
    defaultVariants: {
        variant: 'default'
    }
});
const ToastWrapper = ({ children, icon, variant = 'default', ...props }) => {
    return (_jsxs(StyledToast, { "data-testid": "toast", variant: variant, ...props, children: [_jsx(Icon, { variant: variant, children: icon && React.cloneElement(icon) }), children] }));
};
const Provider = ({ duration, label, swipeDirection, swipeThreshold, children, ...rest }) => {
    return (_jsxs(ToastPrimitive.Provider, { duration: duration, label: label, swipeDirection: swipeDirection, swipeThreshold: swipeThreshold, children: [children, _jsx(StyledViewport, { ...rest })] }));
};
const StyledContent = styled(Flex, {
    gridArea: 'content',
    height: '100%',
    flexDirection: 'column',
    justifyContent: 'center',
    // padding: '$8 0',
    gap: '$4',
    overflow: 'hidden'
});
const Content = ({ children, ...props }) => {
    return (_jsx(StyledContent, { ...props, children: children }));
};
const StyledAction = styled(ToastPrimitive.Action, {
    gridArea: 'action',
    padding: '0 $6',
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
    position: 'relative',
    gap: '$2'
});
const Action = ({ children, ...props }) => {
    return (_jsx(StyledAction, { className: "toast-actions", ...props, children: children }));
};
export const ToastProvider = Provider;
export const ToastViewport = StyledViewport;
export const Toast = ToastWrapper;
export const ToastContent = Content;
export const ToastTitle = StyledTitle;
export const ToastDescription = StyledDescription;
export const ToastAction = Action;
export const ToastClose = ToastPrimitive.Close;
