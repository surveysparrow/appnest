import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import * as TooltipPrimitive from '@radix-ui/react-tooltip';
import { styled, keyframes } from '../../stitches.config';
const slideUpAndFade = keyframes({
    '0%': { opacity: 0, transform: 'translateY(2px)' },
    '100%': { opacity: 1, transform: 'translateY(0)' }
});
const slideRightAndFade = keyframes({
    '0%': { opacity: 0, transform: 'translateX(-2px)' },
    '100%': { opacity: 1, transform: 'translateX(0)' }
});
const slideDownAndFade = keyframes({
    '0%': { opacity: 0, transform: 'translateY(-2px)' },
    '100%': { opacity: 1, transform: 'translateY(0)' }
});
const slideLeftAndFade = keyframes({
    '0%': { opacity: 0, transform: 'translateX(2px)' },
    '100%': { opacity: 1, transform: 'translateX(0)' }
});
const StyledContent = styled(TooltipPrimitive.Content, {
    lineHeight: '$sm',
    color: '$white900',
    backgroundColor: '$black900',
    userSelect: 'none',
    opacity: 1,
    maxWidth: '240px',
    '@media (prefers-reduced-motion: no-preference)': {
        animationDuration: '800ms',
        animationTimingFunction: 'cubic-bezier(0.16, 1, 0.3, 1)',
        willChange: 'transform, opacity',
        '&[data-state="delayed-open"]': {
            '&[data-side="top"]': { animationName: slideDownAndFade },
            '&[data-side="right"]': { animationName: slideLeftAndFade },
            '&[data-side="bottom"]': { animationName: slideUpAndFade },
            '&[data-side="left"]': { animationName: slideRightAndFade }
        }
    },
    variants: {
        size: {
            sm: {
                padding: '$2 $4',
                fontSize: '$xs',
                borderRadius: '$sm'
            },
            md: {
                padding: '$6 $8',
                fontSize: '$sm',
                borderRadius: '$md'
            }
        }
    },
    defaultVariants: {
        size: 'sm'
    }
});
const StyledArrow = styled(TooltipPrimitive.Arrow, {
    fill: '$black900',
    variants: {
        size: {
            sm: {
                width: '10px',
                height: '6px'
            },
            md: {
                width: '$5',
                height: '$3'
            }
        }
    },
    defaultVariants: {
        size: 'sm'
    }
});
export const Tooltip = ({ children, content, side, align, size, open, defaultOpen, onOpenChange, ...props }) => {
    return (_jsxs(TooltipPrimitive.Root, { open: open, defaultOpen: defaultOpen, onOpenChange: onOpenChange, children: [_jsx(TooltipPrimitive.Trigger, { asChild: true, children: children }), content && (_jsx(TooltipPrimitive.Portal, { children: _jsxs(StyledContent, { side: side, align: align, size: size, ...props, children: [content, _jsx(StyledArrow, { size: size })] }) }))] }));
};
export const TooltipProvider = TooltipPrimitive.Provider;
