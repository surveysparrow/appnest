import React, { ComponentProps, ReactNode } from 'react';
import * as TooltipPrimitive from '@radix-ui/react-tooltip';
declare const StyledContent: import("@stitches/react/types/styled-component").StyledComponent<React.ForwardRefExoticComponent<TooltipPrimitive.TooltipContentProps & React.RefAttributes<HTMLDivElement>>, {
    size?: "sm" | "md" | undefined;
}, {
    'screen-xs': "(min-width: 480px)";
    'screen-sm': "(min-width: 640px)";
    'screen-md': "(min-width: 768px)";
    'screen-lg': "(min-width: 1024px)";
    'screen-xl': "(min-width: 1280px)";
    'screen-2xl': "(min-width: 1536px)";
}, import("@stitches/react/types/css-util").CSS<{
    'screen-xs': "(min-width: 480px)";
    'screen-sm': "(min-width: 640px)";
    'screen-md': "(min-width: 768px)";
    'screen-lg': "(min-width: 1024px)";
    'screen-xl': "(min-width: 1280px)";
    'screen-2xl': "(min-width: 1536px)";
}, {
    colors: {
        primary: string;
        secondary: string;
        accent50: string;
        accent100: string;
        accent200: string;
        accent300: string;
        accent400: string;
        accent500: string;
        accent600: string;
        accent700: string;
        accent800: string;
        accent900: string;
        primary50: string;
        primary100: string;
        primary200: string;
        primary300: string;
        primary400: string;
        primary500: string;
        primary600: string;
        primary700: string;
        primary800: string;
        primary900: string;
        warning50: string;
        warning100: string;
        warning200: string;
        warning300: string;
        warning400: string;
        warning500: string;
        warning600: string;
        warning700: string;
        warning800: string;
        warning900: string;
        highlight50: string;
        highlight100: string;
        highlight200: string;
        highlight300: string;
        highlight400: string;
        highlight500: string;
        highlight600: string;
        highlight700: string;
        highlight800: string;
        highlight900: string;
        positive50: string;
        positive100: string;
        positive200: string;
        positive300: string;
        positive400: string;
        positive500: string;
        positive600: string;
        positive700: string;
        positive800: string;
        positive900: string;
        secondary50: string;
        secondary100: string;
        secondary200: string;
        secondary300: string;
        secondary400: string;
        secondary500: string;
        secondary600: string;
        secondary700: string;
        secondary800: string;
        secondary900: string;
        system50: string;
        system100: string;
        system200: string;
        system300: string;
        system400: string;
        system500: string;
        system600: string;
        system700: string;
        system800: string;
        system900: string;
        error50: string;
        error100: string;
        error200: string;
        error300: string;
        error400: string;
        error500: string;
        error600: string;
        error700: string;
        error800: string;
        error900: string;
        neutral50: string;
        neutral100: string;
        neutral200: string;
        neutral300: string;
        neutral400: string;
        neutral500: string;
        neutral600: string;
        neutral700: string;
        neutral800: string;
        neutral900: string;
        black50: string;
        black100: string;
        black200: string;
        black300: string;
        black400: string;
        black500: string;
        black600: string;
        black700: string;
        black800: string;
        black900: string;
        white50: string;
        white100: string;
        white200: string;
        white300: string;
        white400: string;
        white500: string;
        white600: string;
        white700: string;
        white800: string;
        white900: string;
    };
    space: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        21: string;
        22: string;
        23: string;
        24: string;
        25: string;
        26: string;
        27: string;
        28: string;
        29: string;
        30: string;
        31: string;
        32: string;
        33: string;
        34: string;
        35: string;
        36: string;
        37: string;
        38: string;
        39: string;
        40: string;
        41: string;
        42: string;
        43: string;
        44: string;
        45: string;
        46: string;
        47: string;
        48: string;
        49: string;
        50: string;
    };
    fontSizes: {
        xxs: string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        '2xl': string;
        '3xl': string;
        '4xl': string;
        '5xl': string;
    };
    fonts: {
        body: string;
        heading: string;
    };
    fontWeights: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
    };
    lineHeights: {
        xxs: string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        '2xl': string;
        '3xl': string;
        '4xl': string;
    };
    letterSpacings: unknown;
    sizes: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        11: string;
        12: string;
        13: string;
        14: string;
        15: string;
        16: string;
        17: string;
        18: string;
        19: string;
        20: string;
        21: string;
        22: string;
        23: string;
        24: string;
        25: string;
        26: string;
        27: string;
        28: string;
        29: string;
        30: string;
        31: string;
        32: string;
        33: string;
        34: string;
    };
    borderWidths: {
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
    };
    borderStyles: unknown;
    radii: {
        none: string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        '2xl': string;
        '3xl': string;
        '4xl': string;
        round: string;
        pill: string;
    };
    shadows: {
        sm: string;
    };
    zIndices: unknown;
    transitions: {
        1: string;
        2: string;
        3: string;
    };
}, import("@stitches/react/types/config").DefaultThemeMap, {
    backgroundColorOpacity: ([value, opacity]: [string, number]) => {
        backgroundColor: string;
    };
    colorOpacity: ([value, opacity]: [string, number]) => {
        color: string;
    };
    borderColorOpacity: ([value, opacity]: [string, number]) => {
        borderColor: string;
    };
}>>;
interface TooltipBaseProps {
    content: ReactNode;
}
export declare type TooltipProps = TooltipBaseProps & ComponentProps<typeof StyledContent> & ComponentProps<typeof TooltipPrimitive.Root>;
export declare const Tooltip: ({ children, content, side, align, size, open, defaultOpen, onOpenChange, ...props }: TooltipProps) => JSX.Element;
export declare const TooltipProvider: React.FC<TooltipPrimitive.TooltipProviderProps>;
export {};
