import * as React from 'react';
import { type ToastProps } from '../toast/toast';
declare type ToastrToast = ToastProps & {
    icon?: React.ReactElement;
    variant: string;
    id: string;
    title?: React.ReactNode;
    description?: React.ReactNode;
    action?: React.ReactElement;
};
declare const actionTypes: {
    readonly ADD_TOAST: "ADD_TOAST";
    readonly UPDATE_TOAST: "UPDATE_TOAST";
    readonly DISMISS_TOAST: "DISMISS_TOAST";
    readonly REMOVE_TOAST: "REMOVE_TOAST";
};
declare type ActionType = typeof actionTypes;
declare type Action = {
    type: ActionType['ADD_TOAST'];
    toast: ToastrToast;
} | {
    type: ActionType['UPDATE_TOAST'];
    toast: Partial<ToastrToast>;
} | {
    type: ActionType['DISMISS_TOAST'];
    toastId?: ToastrToast['id'];
} | {
    type: ActionType['REMOVE_TOAST'];
    toastId?: ToastrToast['id'];
};
interface State {
    toasts: ToastrToast[];
}
export declare function reducer(state: State, action: Action): State;
interface Toast extends Omit<ToastrToast, 'id'> {
}
declare function toast({ ...toastProps }: Toast): {
    id: string;
    dismiss: () => void;
    update: (props: ToastrToast) => void;
};
declare function useToast(): {
    toast: typeof toast;
    dismiss: (toastId?: string) => void;
    toasts: ToastrToast[];
};
export { useToast, toast };
