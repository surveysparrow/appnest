import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import React, { useId } from 'react';
import * as RadioGroupPrimitive from '@radix-ui/react-radio-group';
import { styled } from '../../stitches.config';
import { Flex } from '../flex';
const StyledRadioGroup = styled(RadioGroupPrimitive.Root, {
    display: 'flex',
    flexDirection: 'column',
    gap: '$2'
});
const StyledRadio = styled(RadioGroupPrimitive.Item, {
    all: 'unset',
    boxSizing: 'border-box',
    backgroundColor: '$white900',
    borderRadius: '$round',
    border: '$borderWidths$xs solid $neutral700',
    transition: 'all $transitions$2',
    '&:hover': { borderColor: '$secondary500' },
    '&:focus-visible': {
        borderColor: '$secondary500',
        $$shadowColor: '$colors$primary300',
        boxShadow: 'rgb(255, 255, 255) 0px 0px 0px 2px, $$shadowColor 0px 0px 0px 4px, rgba(0, 0, 0, 0.05) 0px 1px 2px 0px'
    },
    '&[data-state="checked"]': {
        borderColor: '$secondary500'
    },
    '&[data-disabled]': {
        cursor: 'not-allowed'
    },
    variants: {
        size: {
            md: {
                width: '$5',
                height: '$5',
                '& span::after': {
                    width: '$3',
                    height: '$3'
                }
            },
            sm: {
                width: '$4',
                height: '$4',
                '& span::after': {
                    width: '$2',
                    height: '$2'
                }
            }
        }
    },
    defaultVariants: {
        size: 'sm'
    }
});
const StyledIndicator = styled(RadioGroupPrimitive.Indicator, {
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
    width: '100%',
    height: '100%',
    position: 'relative',
    '&::after': {
        content: '""',
        display: 'block',
        borderRadius: '$round',
        backgroundColor: '$secondary500'
    }
});
export const RadioGroup = React.forwardRef(({ onChange, disabled, required, value, children, ...rest }, ref) => {
    return (_jsx(StyledRadioGroup, { ref: ref, onValueChange: onChange, disabled: disabled, required: required, ...rest, children: children }));
});
const StyledLabelContainer = styled('label', {
    display: 'inline-flex',
    paddingInlineStart: '$4'
});
export const Radio = React.forwardRef(({ disabled, value, required, children, id, ...rest }, ref) => {
    const uniqueId = id || useId();
    return (_jsxs(Flex, { alignItems: "center", children: [_jsx(StyledRadio, { ref: ref, disabled: disabled, required: required, value: value, id: uniqueId, ...rest, children: _jsx(StyledIndicator, {}) }), children && _jsx(StyledLabelContainer, { htmlFor: uniqueId, children: children })] }));
});
