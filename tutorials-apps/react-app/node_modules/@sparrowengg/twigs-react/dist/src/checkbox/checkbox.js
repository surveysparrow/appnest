import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useId } from 'react';
import * as CheckboxPrimitive from '@radix-ui/react-checkbox';
import { styled } from '../../stitches.config';
import { Flex } from '../flex';
const TickIcon = () => {
    return (_jsx("svg", { width: "10", height: "8", viewBox: "0 0 10 8", fill: "none", xmlns: "http://www.w3.org/2000/svg", children: _jsx("path", { d: "M9 1.25L3.5 6.75L1 4.25", stroke: "white", strokeWidth: "1.8", strokeLinecap: "round", strokeLinejoin: "round" }) }));
};
const HorizontalLineIcon = () => {
    return (_jsx("svg", { width: "10", height: "2", viewBox: "0 0 10 2", fill: "none", xmlns: "http://www.w3.org/2000/svg", children: _jsx("path", { d: "M9 1H1", stroke: "white", strokeWidth: "1.8", strokeLinecap: "round", strokeLinejoin: "round" }) }));
};
const StyledCheckbox = styled(CheckboxPrimitive.Root, {
    backgroundColor: '$white900',
    borderRadius: '$sm',
    display: 'flex',
    alignItems: 'center',
    flexShrink: '0',
    justifyContent: 'center',
    border: '$borderWidths$xs solid $neutral700',
    transition: 'all $transitions$2',
    '&:hover': { border: '$borderWidths$xs solid $neutral700' },
    '&:focus-visible': {
        outline: 'none',
        $$shadowColor: '$colors$primary300',
        border: '$borderWidths$xs solid $neutral700',
        boxShadow: 'rgb(255, 255, 255) 0px 0px 0px 2px, $$shadowColor 0px 0px 0px 4px, rgba(0, 0, 0, 0.05) 0px 1px 2px 0px'
    },
    '&:active, &[data-state="checked"], &[data-state="indeterminate"]': {
        background: '$secondary500',
        border: '$borderWidths$xs solid transparent'
    },
    '& .check-icon': {
        display: 'none'
    },
    '&[data-state="checked"]': {
        '.check-icon': {
            display: 'flex'
        }
    },
    variants: {
        size: {
            sm: {
                width: '$4',
                height: '$4'
            },
            md: {
                width: '$5',
                height: '$5'
            }
        }
    },
    defaultVariants: {
        size: 'sm'
    }
});
const StyledCheckIconContainer = styled('span', {
    display: 'flex',
    alignItems: 'center'
});
const StyledIndicator = styled(CheckboxPrimitive.Indicator, {
    color: '$white900',
    display: 'flex'
});
const StyledLabelContainer = styled('label', {
    display: 'inline-flex',
    paddingInlineStart: '$4'
});
export const Checkbox = ({ checked, disabled, required, onChange, children, id, ...rest }) => {
    const isIndeterminate = checked === 'indeterminate';
    const uniqueId = id || useId();
    return (_jsxs(Flex, { alignItems: "center", children: [_jsx(StyledCheckbox, { checked: checked, onCheckedChange: onChange, disabled: disabled, required: required, id: uniqueId, ...(isIndeterminate && { 'data-state': 'indeterminate' }), ...rest, children: _jsxs(StyledIndicator, { ...(isIndeterminate && { 'data-state': 'indeterminate' }), children: [_jsx(StyledCheckIconContainer, { className: "check-icon", children: _jsx(TickIcon, {}) }), isIndeterminate && _jsx(HorizontalLineIcon, {})] }) }), children && _jsx(StyledLabelContainer, { htmlFor: uniqueId, children: children })] }));
};
