import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from "react/jsx-runtime";
import { TickIcon } from '@sparrowengg/twigs-react-icons';
import React, { forwardRef, useId } from 'react';
import { styled } from '../../stitches.config';
import { Box } from '../box';
import { Separator as DefaultSeparator } from './stepper-separator';
import * as DefaultStepperTrigger from './stepper-trigger';
const StyledStepper = styled('div', {});
const StepperItem = ({ children, label, allowClick, ...props }) => {
    return (_jsx(Box, { ...props, children: children }));
};
const Stepper = forwardRef(({ activeStep = 0, onChange, children, components = {} }, ref) => {
    const step = children[activeStep];
    const stepperId = useId();
    if (!step) {
        throw new Error('Invalid active step');
    }
    const Separator = components.TriggerSeparator || DefaultSeparator;
    const TriggerContainer = components.TriggerContainer || DefaultStepperTrigger.StepperTriggerContainer;
    const TriggerButton = components.TriggerButton || DefaultStepperTrigger.StepperTrigger;
    return (_jsxs(StyledStepper, { ref: ref, children: [_jsx(TriggerContainer, { children: children.map((child, index) => {
                    const { label, allowClick = true, ...rest } = child.props;
                    const showSeparator = index !== children.length - 1;
                    const completed = activeStep > index;
                    const id = useId();
                    return (_jsxs(React.Fragment, { children: [_jsxs(TriggerButton, { tabIndex: allowClick ? 0 : -1, active: index === activeStep, completed: completed, type: "button", cursor: allowClick ? 'pointer' : 'default', ...(onChange && allowClick && {
                                    onClick: () => onChange(index)
                                }), ...rest, children: [_jsx(DefaultStepperTrigger.StepperCount, { children: completed
                                            ? (_jsx(TickIcon, { size: 14, color: "#fff" }))
                                            : index + 1 }), _jsx(_Fragment, { children: label })] }), showSeparator
                                ? _jsx(Separator, {})
                                : null] }, `stepper-control-${stepperId}-${id}`));
                }) }), _jsx(Box, { children: step })] }));
});
export { Stepper, StepperItem };
