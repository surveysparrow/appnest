import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { forwardRef } from 'react';
import { styled } from '../../stitches.config';
import { Box } from '../box';
import { Flex } from '../flex';
import { FormHelperText } from '../form-helper-text';
import { FormLabel } from '../form-label';
import { Text } from '../text';
import { Input } from './input';
const StyledError = styled(FormHelperText, {
    color: '$error500 !important',
    marginTop: '$2'
});
export const FormInput = forwardRef(({ label, showCount, value, error, defaultValue, maxLength, ...rest }, ref) => {
    const mergedValue = value || defaultValue;
    return (_jsxs(Box, { children: [_jsxs(Flex, { alignItems: "center", justifyContent: "space-between", css: { marginBottom: '$2' }, children: [label
                        ? _jsx(FormLabel, { htmlFor: rest.id, children: label })
                        : null, showCount
                        ? (_jsxs(Text, { css: {
                                color: '$neutral700',
                                ...(!label ? { marginLeft: 'auto' } : {})
                            }, "data-testid": "input-char-count", children: [mergedValue?.toString().length || 0, maxLength ? `/${maxLength}` : null] }))
                        : null] }), _jsx(Input, { value: value, defaultValue: defaultValue, ...(maxLength && {
                    maxLength
                }), ref: ref, ...rest }), error
                ? _jsx(StyledError, { size: "xs", children: error })
                : null] }));
});
