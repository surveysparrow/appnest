var $bSzeT$reactariautils = require("@react-aria/utils");
var $bSzeT$reactariagridlist = require("@react-aria/gridlist");
var $bSzeT$reactariainteractions = require("@react-aria/interactions");
var $bSzeT$reactariai18n = require("@react-aria/i18n");
var $bSzeT$react = require("react");
var $bSzeT$reactariaselection = require("@react-aria/selection");
var $bSzeT$reactarialabel = require("@react-aria/label");

function $parcel$export(e, n, v, s) {
  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});
}
function $parcel$interopDefault(a) {
  return a && a.__esModule ? a.default : a;
}

$parcel$export(module.exports, "useTag", () => $a442534c81d8ad16$export$3f568fff7dff2f03);
$parcel$export(module.exports, "useTagGroup", () => $09704b0efefe5140$export$4f8b5cda58b7e8ff);
/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ /*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 
/*
 * Copyright 2020 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */ 






const $09704b0efefe5140$export$653eddfc964b0f8a = new WeakMap();
function $09704b0efefe5140$export$4f8b5cda58b7e8ff(props, state, ref) {
    let { direction: direction  } = (0, $bSzeT$reactariai18n.useLocale)();
    let keyboardDelegate = props.keyboardDelegate || new (0, $bSzeT$reactariaselection.ListKeyboardDelegate)({
        collection: state.collection,
        ref: ref,
        orientation: "horizontal",
        direction: direction,
        disabledKeys: state.disabledKeys
    });
    let { labelProps: labelProps , fieldProps: fieldProps , descriptionProps: descriptionProps , errorMessageProps: errorMessageProps  } = (0, $bSzeT$reactarialabel.useField)({
        ...props,
        labelElementType: "span"
    });
    let { gridProps: gridProps  } = (0, $bSzeT$reactariagridlist.useGridList)({
        ...props,
        ...fieldProps,
        keyboardDelegate: keyboardDelegate,
        shouldFocusWrap: true
    }, state, ref);
    let [isFocusWithin, setFocusWithin] = (0, $bSzeT$react.useState)(false);
    let { focusWithinProps: focusWithinProps  } = (0, $bSzeT$reactariainteractions.useFocusWithin)({
        onFocusWithinChange: setFocusWithin
    });
    let domProps = (0, $bSzeT$reactariautils.filterDOMProps)(props);
    // If the last tag is removed, focus the container.
    let prevCount = (0, $bSzeT$react.useRef)(state.collection.size);
    (0, $bSzeT$react.useEffect)(()=>{
        if (prevCount.current > 0 && state.collection.size === 0 && isFocusWithin) ref.current.focus();
        prevCount.current = state.collection.size;
    }, [
        state.collection.size,
        isFocusWithin,
        ref
    ]);
    $09704b0efefe5140$export$653eddfc964b0f8a.set(state, {
        onRemove: props.onRemove
    });
    return {
        gridProps: (0, $bSzeT$reactariautils.mergeProps)(gridProps, domProps, {
            role: state.collection.size ? "grid" : null,
            "aria-atomic": false,
            "aria-relevant": "additions",
            "aria-live": isFocusWithin ? "polite" : "off",
            ...focusWithinProps,
            ...fieldProps
        }),
        labelProps: labelProps,
        descriptionProps: descriptionProps,
        errorMessageProps: errorMessageProps
    };
}


var $b6a2538ff098a9ff$exports = {};
var $6a4ddf1abe55d42a$exports = {};
$6a4ddf1abe55d42a$exports = {
    "removeButtonLabel": `إزالة`,
    "removeDescription": `اضغط على مفتاح DELETE لإزالة علامة.`
};


var $1bdc82b10375b4a8$exports = {};
$1bdc82b10375b4a8$exports = {
    "removeButtonLabel": `Премахване`,
    "removeDescription": `Натиснете Delete, за да премахнете маркера.`
};


var $e3fdf009dfe14bbc$exports = {};
$e3fdf009dfe14bbc$exports = {
    "removeButtonLabel": `Odebrat`,
    "removeDescription": `Stisknutím klávesy Delete odeberete značku.`
};


var $8e3a8efadaa261b3$exports = {};
$8e3a8efadaa261b3$exports = {
    "removeButtonLabel": `Fjern`,
    "removeDescription": `Tryk på Slet for at fjerne tag.`
};


var $405462110cf9cc8d$exports = {};
$405462110cf9cc8d$exports = {
    "removeButtonLabel": `Entfernen`,
    "removeDescription": `Auf „Löschen“ drücken, um das Tag zu entfernen.`
};


var $9ec4c01646bfc149$exports = {};
$9ec4c01646bfc149$exports = {
    "removeButtonLabel": `Κατάργηση`,
    "removeDescription": `Πατήστε Διαγραφή για να καταργήσετε την ετικέτα.`
};


var $0b797b6d677cd5c7$exports = {};
$0b797b6d677cd5c7$exports = {
    "removeDescription": `Press Delete to remove tag.`,
    "removeButtonLabel": `Remove`
};


var $bacdb4955d86e000$exports = {};
$bacdb4955d86e000$exports = {
    "removeButtonLabel": `Quitar`,
    "removeDescription": `Pulse Eliminar para quitar la etiqueta.`
};


var $28e6b3e2003cb89e$exports = {};
$28e6b3e2003cb89e$exports = {
    "removeButtonLabel": `Eemalda`,
    "removeDescription": `Sildi eemaldamiseks vajutage kustutusklahvi Delete.`
};


var $080ec9a9a4197fc3$exports = {};
$080ec9a9a4197fc3$exports = {
    "removeButtonLabel": `Poista`,
    "removeDescription": `Poista tunniste painamalla Poista-painiketta.`
};


var $d186548cad5da12b$exports = {};
$d186548cad5da12b$exports = {
    "removeButtonLabel": `Supprimer`,
    "removeDescription": `Appuyez sur Supprimer pour supprimer l’étiquette.`
};


var $58694cb16d86dce9$exports = {};
$58694cb16d86dce9$exports = {
    "removeButtonLabel": `הסר`,
    "removeDescription": `לחץ על מחק כדי להסיר תג.`
};


var $3622620b71bc3eed$exports = {};
$3622620b71bc3eed$exports = {
    "removeButtonLabel": `Ukloni`,
    "removeDescription": `Pritisnite Delete za uklanjanje oznake.`
};


var $25f88eb7a72b76e1$exports = {};
$25f88eb7a72b76e1$exports = {
    "removeButtonLabel": `Eltávolítás`,
    "removeDescription": `Nyomja meg a Delete billentyűt a címke eltávolításához.`
};


var $ac7f4b0e2cb68452$exports = {};
$ac7f4b0e2cb68452$exports = {
    "removeButtonLabel": `Rimuovi`,
    "removeDescription": `Premi Elimina per rimuovere il tag.`
};


var $eb1a168dda0e2196$exports = {};
$eb1a168dda0e2196$exports = {
    "removeButtonLabel": `削除`,
    "removeDescription": `タグを削除するには、Delete キーを押します。`
};


var $eee5df414cc6e698$exports = {};
$eee5df414cc6e698$exports = {
    "removeButtonLabel": `제거`,
    "removeDescription": `태그를 제거하려면 Delete 키를 누르십시오.`
};


var $89b3b12fbd9b247d$exports = {};
$89b3b12fbd9b247d$exports = {
    "removeButtonLabel": `Pašalinti`,
    "removeDescription": `Norėdami pašalinti žymą, paspauskite „Delete“ klavišą.`
};


var $1919b5d1d79b472a$exports = {};
$1919b5d1d79b472a$exports = {
    "removeButtonLabel": `Noņemt`,
    "removeDescription": `Nospiediet Delete [Dzēst], lai noņemtu tagu.`
};


var $19c1a9b6c040fcbd$exports = {};
$19c1a9b6c040fcbd$exports = {
    "removeButtonLabel": `Fjern`,
    "removeDescription": `Trykk på Slett for å fjerne taggen.`
};


var $be2ec555d5f5fd09$exports = {};
$be2ec555d5f5fd09$exports = {
    "removeButtonLabel": `Verwijderen`,
    "removeDescription": `Druk op Verwijderen om de tag te verwijderen.`
};


var $949a33b7200b0e13$exports = {};
$949a33b7200b0e13$exports = {
    "removeButtonLabel": `Usuń`,
    "removeDescription": `Naciśnij Usuń, aby usunąć znacznik.`
};


var $ae5f6174df72ed0e$exports = {};
$ae5f6174df72ed0e$exports = {
    "removeButtonLabel": `Remover`,
    "removeDescription": `Pressione Delete para remover a tag.`
};


var $f93b2eb3a2267af4$exports = {};
$f93b2eb3a2267af4$exports = {
    "removeButtonLabel": `Eliminar`,
    "removeDescription": `Prima Delete para eliminar a tag.`
};


var $0986e262b15bfc91$exports = {};
$0986e262b15bfc91$exports = {
    "removeButtonLabel": `Îndepărtaţi`,
    "removeDescription": `Apăsați pe Delete (Ștergere) pentru a elimina eticheta.`
};


var $1fc455c3f981c785$exports = {};
$1fc455c3f981c785$exports = {
    "removeButtonLabel": `Удалить`,
    "removeDescription": `Нажмите DELETE, чтобы удалить тег.`
};


var $93e0f346215d9446$exports = {};
$93e0f346215d9446$exports = {
    "removeButtonLabel": `Odstrániť`,
    "removeDescription": `Ak chcete odstrániť značku, stlačte kláves Delete.`
};


var $fef8a51090f12761$exports = {};
$fef8a51090f12761$exports = {
    "removeButtonLabel": `Odstrani`,
    "removeDescription": `Pritisnite Delete, da odstranite oznako.`
};


var $04502b7a450fc878$exports = {};
$04502b7a450fc878$exports = {
    "removeButtonLabel": `Ukloni`,
    "removeDescription": `Pritisnite Obriši da biste uklonili oznaku.`
};


var $95460d4e4c3e3778$exports = {};
$95460d4e4c3e3778$exports = {
    "removeButtonLabel": `Ta bort`,
    "removeDescription": `Tryck på Radera för att ta bort taggen.`
};


var $818e5758c72a695c$exports = {};
$818e5758c72a695c$exports = {
    "removeButtonLabel": `Kaldır`,
    "removeDescription": `Etiketi kaldırmak için Sil tuşuna basın.`
};


var $5c17d07165fb1742$exports = {};
$5c17d07165fb1742$exports = {
    "removeButtonLabel": `Вилучити`,
    "removeDescription": `Натисніть Delete, щоб вилучити тег.`
};


var $c6666cc31aa025e0$exports = {};
$c6666cc31aa025e0$exports = {
    "removeButtonLabel": `删除`,
    "removeDescription": `按下“删除”以删除标记。`
};


var $a34b8398aee73e0f$exports = {};
$a34b8398aee73e0f$exports = {
    "removeButtonLabel": `移除`,
    "removeDescription": `按 Delete 鍵以移除標記。`
};


$b6a2538ff098a9ff$exports = {
    "ar-AE": $6a4ddf1abe55d42a$exports,
    "bg-BG": $1bdc82b10375b4a8$exports,
    "cs-CZ": $e3fdf009dfe14bbc$exports,
    "da-DK": $8e3a8efadaa261b3$exports,
    "de-DE": $405462110cf9cc8d$exports,
    "el-GR": $9ec4c01646bfc149$exports,
    "en-US": $0b797b6d677cd5c7$exports,
    "es-ES": $bacdb4955d86e000$exports,
    "et-EE": $28e6b3e2003cb89e$exports,
    "fi-FI": $080ec9a9a4197fc3$exports,
    "fr-FR": $d186548cad5da12b$exports,
    "he-IL": $58694cb16d86dce9$exports,
    "hr-HR": $3622620b71bc3eed$exports,
    "hu-HU": $25f88eb7a72b76e1$exports,
    "it-IT": $ac7f4b0e2cb68452$exports,
    "ja-JP": $eb1a168dda0e2196$exports,
    "ko-KR": $eee5df414cc6e698$exports,
    "lt-LT": $89b3b12fbd9b247d$exports,
    "lv-LV": $1919b5d1d79b472a$exports,
    "nb-NO": $19c1a9b6c040fcbd$exports,
    "nl-NL": $be2ec555d5f5fd09$exports,
    "pl-PL": $949a33b7200b0e13$exports,
    "pt-BR": $ae5f6174df72ed0e$exports,
    "pt-PT": $f93b2eb3a2267af4$exports,
    "ro-RO": $0986e262b15bfc91$exports,
    "ru-RU": $1fc455c3f981c785$exports,
    "sk-SK": $93e0f346215d9446$exports,
    "sl-SI": $fef8a51090f12761$exports,
    "sr-SP": $04502b7a450fc878$exports,
    "sv-SE": $95460d4e4c3e3778$exports,
    "tr-TR": $818e5758c72a695c$exports,
    "uk-UA": $5c17d07165fb1742$exports,
    "zh-CN": $c6666cc31aa025e0$exports,
    "zh-TW": $a34b8398aee73e0f$exports
};





function $a442534c81d8ad16$export$3f568fff7dff2f03(props, state, ref) {
    let { item: item  } = props;
    let stringFormatter = (0, $bSzeT$reactariai18n.useLocalizedStringFormatter)((0, (/*@__PURE__*/$parcel$interopDefault($b6a2538ff098a9ff$exports))));
    let buttonId = (0, $bSzeT$reactariautils.useId)();
    let { onRemove: onRemove  } = (0, $09704b0efefe5140$export$653eddfc964b0f8a).get(state) || {};
    let { rowProps: rowProps , gridCellProps: gridCellProps , ...states } = (0, $bSzeT$reactariagridlist.useGridListItem)({
        node: item
    }, state, ref);
    // We want the group to handle keyboard navigation between tags.
    delete rowProps.onKeyDownCapture;
    delete states.descriptionProps;
    let onKeyDown = (e)=>{
        if (e.key === "Delete" || e.key === "Backspace") {
            e.preventDefault();
            if (state.selectionManager.isSelected(item.key)) onRemove(new Set(state.selectionManager.selectedKeys));
            else onRemove(new Set([
                item.key
            ]));
        }
    };
    let modality = (0, $bSzeT$reactariainteractions.useInteractionModality)();
    if (modality === "virtual" && typeof window !== "undefined" && "ontouchstart" in window) modality = "touch";
    let description = onRemove && (modality === "keyboard" || modality === "virtual") ? stringFormatter.format("removeDescription") : "";
    let descProps = (0, $bSzeT$reactariautils.useDescription)(description);
    let isFocused = item.key === state.selectionManager.focusedKey;
    // @ts-ignore - data attributes are ok but TS doesn't know about them.
    let domProps = (0, $bSzeT$reactariautils.filterDOMProps)(props);
    return {
        removeButtonProps: {
            "aria-label": stringFormatter.format("removeButtonLabel"),
            "aria-labelledby": `${buttonId} ${rowProps.id}`,
            id: buttonId,
            onPress: ()=>onRemove ? onRemove(new Set([
                    item.key
                ])) : null,
            excludeFromTabOrder: true
        },
        rowProps: (0, $bSzeT$reactariautils.mergeProps)(rowProps, domProps, {
            tabIndex: isFocused || state.selectionManager.focusedKey == null ? 0 : -1,
            onKeyDown: onRemove ? onKeyDown : undefined,
            "aria-describedby": descProps["aria-describedby"]
        }),
        gridCellProps: (0, $bSzeT$reactariautils.mergeProps)(gridCellProps, {
            "aria-errormessage": props["aria-errormessage"],
            "aria-label": props["aria-label"]
        }),
        ...states,
        allowsRemoving: !!onRemove
    };
}





//# sourceMappingURL=main.js.map
